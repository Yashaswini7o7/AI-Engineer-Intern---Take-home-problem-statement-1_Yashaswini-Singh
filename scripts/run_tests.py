"""
Run evaluation against test set and write markdown report.
"""
import yaml
from pathlib import Path
from nl2sql.evaluator import evaluate
from nl2sql.parser import nl_to_sql

ROOT = Path(__file__).resolve().parents[1]
CFG = yaml.safe_load(open(ROOT / "config.yaml"))
DB_URL = CFG["database"]["url"]
TEST_PATH = ROOT / "data" / "test_queries.json"
REPORT = ROOT / "data" / "results_report.md"

def write_report(res: dict):
    lines = []
    lines.append("# Results Report ‚Äî Rental NL‚ÜíSQL POC\n")
    lines.append("_This file is auto-generated by `scripts/run_tests.py`._\n")
    lines.append("## Summary")
    lines.append(f"- **Total questions:** {res['total']}")
    lines.append(f"- **Correct:** {res['correct']}")
    lines.append(f"- **Accuracy:** {res['accuracy']} %\n")
    lines.append("## Details")
    for d in res["details"]:
        if d.get("ok"):
            lines.append(f"- ‚úÖ **{d['question']}**")
        else:
            reason = d.get("reason","mismatch")
            lines.append(f"- ‚ùå **{d['question']}** ‚Äî {reason}")
        if "sys_sql" in d:
            lines.append("  - System SQL:\n\n```sql\n" + d["sys_sql"] + "\n```\n")
        if "gold_sql" in d:
            lines.append("  - Gold SQL:\n\n```sql\n" + d["gold_sql"] + "\n```\n")
    REPORT.write_text("\n".join(lines), encoding="utf-8")
    print(f"üìù Wrote report to {REPORT}")

def main():
    res = evaluate(TEST_PATH.as_posix(), DB_URL, nl_to_sql)
    write_report(res)

if __name__ == "__main__":
    main()

